-- Autogenerated lua file by the Shanker tool
-- 'Wimps and posers -- leave the hall! -- ManOwaR
--
-- DO NOT HAND EDIT.
--

-- This will be the generated level output created by onLoad().
local procData = nil
local players =
{
    {
        name = [[PC1]],
        slot = 1,
    },
    {
        name = [[Nullsec]],
        slot = 2,
        npc = true,
    },
}

local function setupExit( cell, tocell, pcell, dir )
	if tocell then
		local wallInfo = pcell.sides and pcell.sides[ dir ]
		if not wallInfo then
			cell.exits[ dir ] = { cell = tocell }
		elseif wallInfo.door then
			cell.exits[ dir ] = {
				cell = tocell,
				door = true,
				closed = true,
				keybits = wallInfo.keybits,
				locked = wallInfo.locked,
				closed = wallInfo.closed,
				closeEndTurn = wallInfo.closeEndTurn,
				lockEndTurn = wallInfo.lockEndTurn,
				openSound = wallInfo.openSound,
				closeSound = wallInfo.closeSound,
				breakSound = wallInfo.breakSound,
			}
		end
		cell.sides[ dir ] = wallInfo
	end
end

local function onLoad( self, params )
	local procgen = include( "sim/procgen" )
	procData = procgen.generateLevel( params )
end

local function addCellTag( board, tag, x, y )
	if board.cell_groups[ tag ] == nil then
		board.cell_groups[ tag ] = { __mode = "k" }
	end
	table.insert( board.cell_groups[ tag ], board[y][x] )
end

local function parseBoard( self, seed, params )
	local util = include( "modules/util" )
	local simdefs = include( "sim/simdefs" )
	local simquery = include( "sim/simquery" )
	local cdefs = include( "client_defs" )

	assert( procData ) -- onLoad failed?

	-- Generate sim board from procgen data.
	local board = { width = procData.board.width, height = procData.board.height, cell_groups = {} }
	for y=1, board.height do
		board[y] = {}
		for x = 1, board.width do
			local pcell = procData.board[y][x]
			if pcell.tileIndex then
				board[y][x] =
				{
					x = x, y = y,
					id = simquery.toCellID( x, y ),
					tileIndex = pcell.tileIndex,
					impass = pcell.impass or 0,
					cover = pcell.cover,
					sightblock = pcell.sightblock,
					noiseRadius = pcell.noiseRadius,
					exits = {}, units = {}, sides = pcell.sides or {},
					exitID = pcell.exitID,
					cell = pcell.cell, deployID = pcell.deployID,
					sightRadius = pcell.sightRadius,
					deployFacing = pcell.deployFacing,
					procgenPrefab = pcell.procgenPrefab,
					procgenRoom = pcell.procgenRoom
				}
				if pcell.tags then
					for _, tag in ipairs( pcell.tags ) do
						addCellTag( board, tag, x, y )
					end
				end
				if pcell.tileIndex == cdefs.TILE_SOLID then
					board[y][x].isSolid = true
				end
			end
		end
	end

	-- Setup exits.
	for y = 1, board.height do
		for x = 1, board.width do
			local cell = board[y][x]
			if cell then
				if x < board.width then
					setupExit( cell, board[y][x + 1], procData.board[y][x], simdefs.DIR_E )
				end
				if x > 1 then
					setupExit( cell, board[y][x - 1], procData.board[y][x], simdefs.DIR_W)
				end
				if y < board.height then
					setupExit( cell, board[y + 1][x], procData.board[y][x], simdefs.DIR_N )
				end
				if y > 1 then
					setupExit( cell, board[y - 1][x], procData.board[y][x], simdefs.DIR_S )
				end
			end
		end
	end

	procData.map = board
	return procData
end

local function parseViz()
	return procData
end

local export =
{
    players = players,

	onLoad = onLoad,
    parseBoard = parseBoard,
    parseViz = parseViz,
}
return export
