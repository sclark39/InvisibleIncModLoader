-- Autogenerated lua file by the Spyface tool
-- 'Wimps and posers -- leave the hall! -- ManOwaR
--
-- DO NOT HAND EDIT.
--
local tiles =
{
    {
        x = 1,
        y = 1,
        variant = 0,
    },
    {
        x = 1,
        y = 2,
        variant = 0,
    },
    {
        x = 1,
        y = 3,
        variant = 0,
    },
    {
        x = 1,
        y = 4,
        variant = 0,
    },
    {
        x = 1,
        y = 5,
        variant = 0,
    },
    {
        x = 1,
        y = 6,
        variant = 0,
    },
    {
        x = 1,
        y = 7,
        variant = 0,
    },
    {
        x = 1,
        y = 8,
        variant = 0,
    },
    {
        x = 1,
        y = 9,
        variant = 0,
    },
    {
        x = 2,
        y = 1,
        variant = 0,
    },
    {
        x = 2,
        y = 2,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 2,
        y = 3,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 2,
        y = 4,
        variant = 0,
    },
    {
        x = 2,
        y = 5,
        variant = 0,
    },
    {
        x = 2,
        y = 6,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 2,
        y = 7,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 2,
        y = 8,
        variant = 0,
    },
    {
        x = 2,
        y = 9,
        variant = 0,
    },
    {
        x = 3,
        y = 1,
        variant = 0,
    },
    {
        x = 3,
        y = 2,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 3,
        y = 3,
        variant = 0,
        impass = 1,
        cover = 1,
    },
    {
        x = 3,
        y = 4,
        variant = 0,
    },
    {
        x = 3,
        y = 5,
        variant = 0,
    },
    {
        x = 3,
        y = 6,
        variant = 0,
    },
    {
        x = 3,
        y = 7,
        variant = 0,
    },
    {
        x = 3,
        y = 8,
        variant = 0,
    },
    {
        x = 3,
        y = 9,
        variant = 0,
    },
    {
        x = 4,
        y = 1,
        variant = 0,
    },
    {
        x = 4,
        y = 2,
        variant = 0,
    },
    {
        x = 4,
        y = 3,
        variant = 0,
    },
    {
        x = 4,
        y = 4,
        variant = 0,
    },
    {
        x = 4,
        y = 5,
        variant = 0,
    },
    {
        x = 4,
        y = 6,
        variant = 0,
    },
    {
        x = 4,
        y = 7,
        variant = 0,
    },
    {
        x = 4,
        y = 8,
        variant = 0,
    },
    {
        x = 4,
        y = 9,
        variant = 0,
    },
    {
        x = 5,
        y = 1,
        variant = 0,
    },
    {
        x = 5,
        y = 2,
        variant = 0,
    },
    {
        x = 5,
        y = 3,
        variant = 0,
    },
    {
        x = 5,
        y = 4,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 5,
        y = 5,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 5,
        y = 6,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 5,
        y = 7,
        variant = 0,
    },
    {
        x = 5,
        y = 8,
        variant = 0,
    },
    {
        x = 5,
        y = 9,
        variant = 0,
    },
    {
        x = 6,
        y = 1,
        variant = 0,
    },
    {
        x = 6,
        y = 2,
        variant = 0,
    },
    {
        x = 6,
        y = 3,
        variant = 0,
    },
    {
        x = 6,
        y = 4,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 6,
        y = 5,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 6,
        y = 6,
        variant = 0,
        deployIndex = 1,
        deployFacing = 0,
    },
    {
        x = 6,
        y = 7,
        variant = 0,
    },
    {
        x = 6,
        y = 8,
        variant = 0,
    },
    {
        x = 6,
        y = 9,
        variant = 0,
    },
    {
        x = 7,
        y = 1,
        variant = 0,
    },
    {
        x = 7,
        y = 2,
        variant = 0,
    },
    {
        x = 7,
        y = 3,
        variant = 0,
    },
    {
        x = 7,
        y = 4,
        variant = 0,
    },
    {
        x = 7,
        y = 5,
        variant = 0,
    },
    {
        x = 7,
        y = 6,
        variant = 0,
    },
    {
        x = 7,
        y = 7,
        variant = 0,
    },
    {
        x = 7,
        y = 8,
        variant = 0,
    },
    {
        x = 7,
        y = 9,
        variant = 0,
    },
    {
        x = 8,
        y = 1,
        variant = 0,
    },
    {
        x = 8,
        y = 2,
        variant = 0,
    },
    {
        x = 8,
        y = 3,
        variant = 0,
    },
    {
        x = 8,
        y = 4,
        variant = 0,
    },
    {
        x = 8,
        y = 5,
        variant = 0,
    },
    {
        x = 8,
        y = 6,
        variant = 0,
    },
    {
        x = 8,
        y = 7,
        variant = 0,
    },
    {
        x = 8,
        y = 8,
        variant = 0,
    },
    {
        x = 8,
        y = 9,
        variant = 0,
    },
    {
        x = 9,
        y = 1,
        variant = 0,
    },
    {
        x = 9,
        y = 2,
        variant = 0,
    },
    {
        x = 9,
        y = 3,
        variant = 0,
    },
    {
        x = 9,
        y = 4,
        variant = 0,
    },
    {
        x = 9,
        y = 5,
        variant = 0,
    },
    {
        x = 9,
        y = 6,
        variant = 0,
    },
    {
        x = 9,
        y = 7,
        variant = 0,
    },
    {
        x = 9,
        y = 8,
        variant = 0,
    },
    {
        x = 9,
        y = 9,
        variant = 0,
    },
}
local walls =
{
    {
        x = 1,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 2,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 2,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 2,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 2,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 3,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 3,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 3,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 3,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 4,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 4,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 4,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 4,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 5,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 5,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 5,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 5,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 6,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 6,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 6,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 6,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 7,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 7,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 7,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 7,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 8,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 8,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 8,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 8,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 0,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 10,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 4,
    },
    {
        x = 9,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 0,
    },
    {
        x = 1,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 1,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 1,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 1,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 2,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 2,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 2,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 2,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 3,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 3,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 3,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 3,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 4,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 4,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 4,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 4,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 5,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 5,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 5,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 5,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 6,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 6,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 6,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 6,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 7,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 7,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 7,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 7,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 8,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 8,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 8,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 8,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 9,
        y = 0,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 9,
        y = 1,
        wallIndex = [[default_wall]],
        dir = 6,
    },
    {
        x = 9,
        y = 9,
        wallIndex = [[default_wall]],
        dir = 2,
    },
    {
        x = 9,
        y = 10,
        wallIndex = [[default_wall]],
        dir = 6,
    },
}
local units =
{
}
local decos =
{
    {
        x = 3,
        y = 2,
        kanim = [[decor_sk_office_koipond1]],
        facing = 0,
    },
    {
        x = 2,
        y = 6,
        kanim = [[decor_sk_office_fishtank1]],
        facing = 0,
    },
}
local lights =
{
}
local sounds =
{
    {
        name = [[Objects/aquarium]],
        x = 2,
        y = 6,
    },
    {
        name = [[Objects/fishpond]],
        x = 3,
        y = 2,
    },
}
local lvlData = nil

local function setupExit( cell, tocell, dir )
	if tocell then
		cell.exits[ dir ] = { cell = tocell }
	end
end

local function getTileIndex( tile )
	local cdefs = include( "client_defs" )
	local simdefs = include( "sim/simdefs" )
	local tileIndex
	if tile.zone == nil then
		-- For pre-generated levels, "default" tiles default to OFFICE.
		return cdefs.TILE_OFFICE
	else
		for i, mapTile in ipairs( cdefs.MAPTILES ) do
			if mapTile.zone.name == tile.zone then
				tileIndex = i
				local tileVariant
				if type(mapTile.variant) == "table" then
					tileVariant = mapTile.variant[ simdefs.DIR_N ]
				else
					tileVariant = mapTile.variant
				end
				if tileVariant == tile.variant then
					break
				end
			end
		end
		return tileIndex or cdefs.TILE_UNKNOWN
	end
end

local function parseBoard( self, seed )
	local simdefs = include( "sim/simdefs" )
	local simquery = include( "sim/simquery" )
	local util = include( "modules/util" )
	local array = include( "modules/array" )
	local rand = include( "modules/rand" )
	local WALL_TYPES = include( "sim/walltypes" )

	-- Initialize the board.  Need to create all cells, empty ones included.
	local board = { width = self.width, height = self.height, cell_groups = { } }
	for y=1,self.height do
		board[y] = {}
	end
	
	for i,tile in ipairs(self.tiles) do
		board[tile.y][tile.x] =
		{
			id = simquery.toCellID( tile.x, tile.y ), x = tile.x, y = tile.y,
			tileIndex = getTileIndex( tile ),
			impass = tile.impass or 0, cover = tile.cover, sightblock = tile.sightblock,
			exitID = tile.exitID, deployID = tile.deployIndex,
			deployFacing = tile.deployFacing,
			noiseRadius = tile.noiseRadius,
			sightRadius = tile.sightRadius, exits = {}, units = {}, sides = {},
		}
		if tile.tags then
			for _, tag in ipairs( tile.tags ) do
				if board.cell_groups[ tag ] == nil then
					board.cell_groups[ tag ] = { __mode = "k" }
				end
				table.insert( board.cell_groups[ tag ], board[tile.y][tile.x] )
			end
		end
	end

	for i,tile in ipairs(self.tiles) do
		local cell = board[tile.y][tile.x]

		if tile.x < self.width then
			setupExit( cell, board[tile.y][tile.x + 1], simdefs.DIR_E )
		end
		if tile.x > 1 then
			setupExit( cell, board[tile.y][tile.x - 1], simdefs.DIR_W)
		end
		if tile.y < self.height then
			setupExit( cell, board[tile.y + 1][tile.x], simdefs.DIR_N )
		end
		if tile.y > 1 then
			setupExit( cell, board[tile.y - 1][tile.x], simdefs.DIR_S )
		end
	end

	for i,wall in ipairs(self.walls) do
		if board[wall.y] then
			local cell = board[wall.y][wall.x]
			if cell then
				local wallInfo = WALL_TYPES[ wall.wallIndex ]
				assert( wallInfo, wall.wallIndex )
				cell.sides[ wall.dir ] = wallInfo
				if wallInfo.door then
					if cell.exits[ wall.dir ] == nil then
						cell.exits[ wall.dir ] = {}
					end

					cell.exits[ wall.dir ].door = true
					cell.exits[ wall.dir ].closed = wallInfo.closed
					cell.exits[ wall.dir ].keybits = wallInfo.keybits
					cell.exits[ wall.dir ].locked = wallInfo.locked
					cell.exits[ wall.dir ].closeSound = wallInfo.closeSound
					cell.exits[ wall.dir ].openSound = wallInfo.openSound
					cell.exits[ wall.dir ].breakSound = wallInfo.breakSound
				else
					cell.exits[ wall.dir ] = nil
				end
			end
		end
	end

	lvlData =
	{
		map = board,
		units = self.units,
		decos = self.decos,
		sounds = self.sounds,
		lights = self.lights,
		scripts = {},
		ice_programs = util.weighted_list(),
	}

	return lvlData
end

local function parseViz( self )
	return lvlData
end

local export =
{
    width = 9,
    height = 9,
    version = 1,
    tiles = tiles,
    walls = walls,
    units = units,
    decos = decos,
    lights = lights,
    sounds = sounds,
    parseBoard = parseBoard,
    parseViz = parseViz,
}
return export
